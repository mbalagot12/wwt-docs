# Deploy to Nginx Server
name: Deploy to Nginx Server

on:
  # Automatic deployment when GitHub Pages deployment completes
  workflow_run:
    workflows: ["Deploy Documentation"]
    types:
      - completed
    branches: [main]

  # Manual trigger for nginx deployment (with options)
  workflow_dispatch:
    inputs:
      server_host:
        description: 'Server hostname or IP'
        required: true
        default: 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com'
      force_update:
        description: 'Force update even if no changes'
        type: boolean
        default: false
      dry_run:
        description: 'Dry run (test without deploying)'
        type: boolean
        default: false

env:
  SERVER_USER: ubuntu
  SERVER_PATH: /var/www/wwt-acws.duckdns.org
  NGINX_SERVICE: nginx

jobs:
  deploy-to-nginx:
    runs-on: ubuntu-latest
    # Run for both automatic (workflow_run) and manual (workflow_dispatch) triggers
    # Skip if the triggering workflow failed (for workflow_run events)
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.NGINX_SERVER_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts

      - name: Check server connectivity
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üîó Testing connection to $SERVER_HOST..."
          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "echo 'Connection successful'"

      - name: Backup current site
        if: ${{ github.event_name == 'workflow_run' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true') }}
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üíæ Creating backup of current site..."

          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "
            if [ -d '${{ env.SERVER_PATH }}' ]; then
              sudo cp -r '${{ env.SERVER_PATH }}' '${{ env.SERVER_PATH }}.backup.$(date +%Y%m%d_%H%M%S)'
              echo '‚úÖ Backup created'
            else
              echo '‚ö†Ô∏è No existing site to backup'
            fi
          "

      - name: Dry run - Backup simulation
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true' }}
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üß™ DRY RUN: Would create backup of current site..."
          echo "Command: sudo cp -r '${{ env.SERVER_PATH }}' '${{ env.SERVER_PATH }}.backup.$(date +%Y%m%d_%H%M%S)'"

      - name: Update site from GitHub
        if: ${{ github.event_name == 'workflow_run' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true') }}
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üîÑ Updating site from GitHub..."

          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "
            # Check if site directory exists
            if [ -d '${{ env.SERVER_PATH }}' ]; then
              echo 'üìÅ Site directory exists, checking for git repository...'
              cd '${{ env.SERVER_PATH }}'

              # Check if it's a git repository
              if [ -d '.git' ]; then
                echo 'üì• Pulling latest changes from gh-pages...'

                # Fix git authentication issues
                sudo git config credential.helper ''
                sudo git config --unset-all credential.helper 2>/dev/null || true

                # Try to fetch with no prompts
                if sudo GIT_TERMINAL_PROMPT=0 git fetch origin 2>/dev/null; then
                  echo '‚úÖ Git fetch successful'
                  sudo git reset --hard origin/gh-pages
                  sudo git clean -fd
                else
                  echo '‚ö†Ô∏è Git fetch failed, re-cloning repository...'
                  cd /var/www/
                  sudo rm -rf '${{ env.SERVER_PATH }}.old'
                  sudo mv '${{ env.SERVER_PATH }}' '${{ env.SERVER_PATH }}.old'
                  sudo git clone -b gh-pages https://github.com/${{ github.repository }}.git '${{ env.SERVER_PATH }}'
                fi
              else
                echo 'üÜï Directory exists but not a git repo, re-cloning...'
                cd /var/www/
                sudo rm -rf '${{ env.SERVER_PATH }}.old'
                sudo mv '${{ env.SERVER_PATH }}' '${{ env.SERVER_PATH }}.old'
                sudo git clone -b gh-pages https://github.com/${{ github.repository }}.git '${{ env.SERVER_PATH }}'
              fi
            else
              echo 'üÜï Site directory does not exist, creating and cloning repository...'
              cd /var/www/
              sudo mkdir -p \$(dirname '${{ env.SERVER_PATH }}')
              sudo git clone -b gh-pages https://github.com/${{ github.repository }}.git '${{ env.SERVER_PATH }}'
            fi

            echo '‚úÖ Site updated from GitHub'
          "

      - name: Dry run - Update simulation
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true' }}
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üß™ DRY RUN: Would update site from GitHub..."

          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "
            if [ -d '${{ env.SERVER_PATH }}' ]; then
              echo 'üìÅ Site directory exists'
              cd '${{ env.SERVER_PATH }}'

              if [ -d '.git' ]; then
                echo 'üß™ Would run: git config credential.helper && git fetch origin && git reset --hard origin/gh-pages'
                echo 'Current branch:' \$(git branch --show-current)
                echo 'Current commit:' \$(git log -1 --oneline)
                echo 'Remote status (if accessible):' \$(git status -uno 2>/dev/null || echo 'Git status unavailable')

                # Test if we can access remote
                if sudo GIT_TERMINAL_PROMPT=0 git ls-remote origin gh-pages >/dev/null 2>&1; then
                  echo '‚úÖ Remote access working'
                else
                  echo '‚ö†Ô∏è Remote access issue - would re-clone repository'
                fi
              else
                echo 'üß™ Directory exists but not a git repo - would re-clone'
              fi
            else
              echo 'üß™ Site directory does not exist - would create and clone'
              echo 'üß™ Would run: mkdir -p \$(dirname ${{ env.SERVER_PATH }}) && git clone -b gh-pages https://github.com/${{ github.repository }}.git'
            fi
          "

      - name: Set proper permissions
        if: ${{ github.event_name == 'workflow_run' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true') }}
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üîê Setting proper permissions..."

          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "
            sudo chown -R www-data:www-data '${{ env.SERVER_PATH }}'
            sudo chmod -R 755 '${{ env.SERVER_PATH }}'
            sudo find '${{ env.SERVER_PATH }}' -type f -exec chmod 644 {} \;
            echo '‚úÖ Permissions set'
          "

      - name: Dry run - Permissions simulation
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true' }}
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üß™ DRY RUN: Would set proper permissions..."
          echo "Commands:"
          echo "  sudo chown -R www-data:www-data '${{ env.SERVER_PATH }}'"
          echo "  sudo chmod -R 755 '${{ env.SERVER_PATH }}'"
          echo "  sudo find '${{ env.SERVER_PATH }}' -type f -exec chmod 644 {} \;"

      - name: Validate nginx configuration
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üîß Validating nginx configuration..."

          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "
            sudo nginx -t
            if [ \$? -eq 0 ]; then
              echo '‚úÖ Nginx configuration is valid'
            else
              echo '‚ùå Nginx configuration has errors'
              exit 1
            fi
          "

      - name: Reload nginx
        if: ${{ github.event_name == 'workflow_run' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true') }}
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üîÑ Reloading nginx..."

          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "
            sudo systemctl reload ${{ env.NGINX_SERVICE }}
            sudo systemctl status ${{ env.NGINX_SERVICE }} --no-pager -l
            echo '‚úÖ Nginx reloaded'
          "

      - name: Dry run - Nginx reload simulation
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true' }}
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üß™ DRY RUN: Would reload nginx..."
          echo "Command: sudo systemctl reload ${{ env.NGINX_SERVICE }}"

          # Still check nginx status in dry run
          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "
            sudo systemctl status ${{ env.NGINX_SERVICE }} --no-pager -l
          "

      - name: Test site accessibility
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üåê Testing site accessibility..."

          # Test local access from server
          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "
            # Test local nginx response
            HTTP_CODE=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost/)
            if [ \"\$HTTP_CODE\" = '200' ]; then
              echo \"‚úÖ Local site is accessible (HTTP \$HTTP_CODE)\"
            else
              echo \"‚ö†Ô∏è Local site returned HTTP \$HTTP_CODE\"
            fi

            # Test if site directory and index.html exist
            if [ -d '${{ env.SERVER_PATH }}' ]; then
              echo '‚úÖ Site directory exists'
              if [ -f '${{ env.SERVER_PATH }}/index.html' ]; then
                echo '‚úÖ index.html found'
              else
                echo '‚ùå index.html not found'
                echo 'Directory contents:'
                ls -la '${{ env.SERVER_PATH }}/' || echo 'Cannot list directory contents'
              fi
            else
              echo '‚ùå Site directory does not exist: ${{ env.SERVER_PATH }}'
              echo 'Available directories in /var/www/:'
              ls -la /var/www/ || echo 'Cannot list /var/www/ contents'
            fi
          "

      - name: Update deployment status
        run: |
          IS_DRY_RUN="${{ github.event.inputs.dry_run }}"

          if [[ "$IS_DRY_RUN" == "true" ]]; then
            echo "## üß™ Nginx Dry Run Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Mode**: DRY RUN (No actual deployment)" >> $GITHUB_STEP_SUMMARY
            echo "- **Server**: ${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Path**: ${{ env.SERVER_PATH }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ‚úÖ Dry Run Completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üß™ What Would Happen" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Server connectivity verified" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Would create site backup" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Would update content from gh-pages" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Would configure permissions" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Nginx configuration validated" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Would reload nginx service" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Would test site accessibility" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üöÄ To Deploy for Real" >> $GITHUB_STEP_SUMMARY
            echo "Run the workflow again with 'Dry run' unchecked" >> $GITHUB_STEP_SUMMARY
          else
            echo "## üöÄ Nginx Deployment Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Server**: ${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Path**: ${{ env.SERVER_PATH }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ‚úÖ Deployed Successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üåê Site URLs" >> $GITHUB_STEP_SUMMARY
            echo "- **Main Site**: http://wwt-acws.duckdns.org/" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Pages**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã Deployment Steps Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Server connectivity verified" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Site backup created" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Content updated from gh-pages" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Permissions configured" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Nginx configuration validated" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Nginx service reloaded" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Site accessibility tested" >> $GITHUB_STEP_SUMMARY
          fi

  cleanup-old-backups:
    needs: deploy-to-nginx
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.NGINX_SERVER_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts

      - name: Cleanup old backups
        run: |
          SERVER_HOST="${{ github.event.inputs.server_host || 'ec2-3-140-61-206.us-east-2.compute.amazonaws.com' }}"
          echo "üßπ Cleaning up old backups..."

          ssh ${{ env.SERVER_USER }}@$SERVER_HOST "
            # Keep only the 5 most recent backups
            cd /var/www/
            sudo find . -name 'wwt-acws.duckdns.org.backup.*' -type d | sort -r | tail -n +6 | sudo xargs rm -rf

            # List remaining backups
            echo 'Remaining backups:'
            sudo find . -name 'wwt-acws.duckdns.org.backup.*' -type d | sort
          "

  notify-deployment:
    needs: [deploy-to-nginx, cleanup-old-backups]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment result
        run: |
          if [[ "${{ needs.deploy-to-nginx.result }}" == "success" ]]; then
            echo "‚úÖ Nginx deployment completed successfully!"
            echo "üåê Site is now live at: http://wwt-acws.duckdns.org/"
          else
            echo "‚ùå Nginx deployment failed!"
            echo "Please check the deployment logs for details."
          fi
